<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dos.Common</name>
    </assembly>
    <members>
        <member name="T:Dos.Common.CommonExpand">
            <summary>
            通用扩展
            </summary>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosTrim(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosTrim(System.String,System.Char[])">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="trimChars"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosTrimStart(System.String,System.Char[])">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="trimChars"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosTrimEnd(System.String,System.Char[])">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="trimChars"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosIsGuid(System.String)">
            <summary>
            是否是Guid
            </summary>
            <Param name="key"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosLength(System.String)">
            <summary>
            获取字节数
            str：需要获取的字符串
            </summary>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosSubString(System.String,System.Int32)">
            <summary>
            按字节数截取指定字节
            </summary>
            <Param name="str">需要获取的字符串</Param>
            <Param name="length">获取的字节长度</Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosIsMobilePhone(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosIsEmail(System.String)">
            <summary>
            
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosIsIdCard(System.String)">
            <summary>
            
            </summary>
            <param name="idCard"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosIsIP(System.String)">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosIsUrl(System.String)">
            <summary>
            
            </summary>
            <param name="strUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosRemoveHtml(System.String)">
             <summary>
             去除HTML标记  
             </summary>   
             <param name="htmlString">包括HTML的源码</param>   
             <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:Dos.Common.CommonExpand.DosGetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取自定义特性，带有缓存功能，避免因.Net内部GetCustomAttributes没有缓存而带来的损耗
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonExpand.DosGetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>获取自定义属性</summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.CommonHelper">
            <summary>
            通用Helper
            </summary>
        </member>
        <member name="M:Dos.Common.CommonHelper.GetChineseSpell(System.String)">
            <summary>
            获取汉字首字母（可包含多个汉字）
            </summary>
            <Param name="strText"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonHelper.GetInitial(System.String)">
            <summary>
            获取第一个汉字的首字母，只能输入汉字
            </summary>
            <Param name="c"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CommonHelper.SimilarityRate(System.String,System.String)">
            <summary>
            计算相似度。
            </summary>
        </member>
        <member name="M:Dos.Common.CommonHelper.Minimum(System.Int32,System.Int32,System.Int32)">
            <summary>
            取三个数中的最小值
            </summary>
        </member>
        <member name="T:Dos.Common.CommonHelper.SimilarityResult">
            <summary>
            计算结果
            </summary>
        </member>
        <member name="F:Dos.Common.CommonHelper.SimilarityResult.Rate">
            <summary>
            相似度，0.54即54%。
            </summary>
        </member>
        <member name="F:Dos.Common.CommonHelper.SimilarityResult.ComputeTimes">
            <summary>
            对比次数
            </summary>
        </member>
        <member name="F:Dos.Common.CommonHelper.SimilarityResult.ExeTime">
            <summary>
            执行时间，毫秒
            </summary>
        </member>
        <member name="T:Dos.Common.Types">
            <summary>
            常用类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Object">
            <summary>
            Object 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Type">
            <summary>
            Type 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.String">
            <summary>
            Stirng 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Char">
            <summary>
            Char 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Boolean">
            <summary>
            Boolean 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Byte">
            <summary>
            Byte 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.ByteArray">
            <summary>
            Byte 数组类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.SByte">
            <summary>
            SByte 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Int16">
            <summary>
            Int16 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.UInt16">
            <summary>
            UInt16 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Int32">
            <summary>
            Int32 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.UInt32">
            <summary>
            UInt32 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Int64">
            <summary>
            Int64 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.UInt64">
            <summary>
            UInt64 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Double">
            <summary>
            Double 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Single">
            <summary>
            Single 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Decimal">
            <summary>
            Decimal 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Guid">
            <summary>
            Guid 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DateTime">
            <summary>
            DateTime 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.TimeSpan">
            <summary>
            TimeSpan 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Nullable">
            <summary>
            Nullable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.ValueType">
            <summary>
            ValueType 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Void">
            <summary>
            void 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DBNull">
            <summary>
            DBNull 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.Delegate">
            <summary>
            Delegate 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.ByteEnumerable">
            <summary>
            ByteEnumerable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IEnumerableofT">
            <summary>
            IEnumerable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IEnumerable">
            <summary>
            IEnumerable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IListSource">
            <summary>
            IListSource 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionary">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionaryOfT">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DictionaryOfT">
            <summary>
            Dictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.StringDictionary">
            <summary>
            StringDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.NameValueCollection">
            <summary>
            NameValueCollection 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDataReader">
            <summary>
            IDataReader 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DataTable">
            <summary>
            DataTable 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.DataRow">
            <summary>
            DataRow 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionaryOfStringAndObject">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:Dos.Common.Types.IDictionaryOfStringAndString">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToSafe(System.String)">
            <summary>
            安全输出字符串(页面内容)
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToInt32(System.String,System.Int32)">
            <summary>
            转换INT类型
            </summary>
            <param name="s"></param>
            <param name="defautValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToInt32(System.String)">
            <summary>
            转换INT类型
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.IsInt(System.String)">
            <summary>
            转换INT类型
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToFloat(System.String,System.Single)">
            <summary>
            转换成FLOAT类型
            </summary>
            <param name="s"></param>
            <param name="defautValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToFloat(System.String)">
            <summary>
            转换成FLOAT类型
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToDouble(System.String,System.Double)">
            <summary>
            转换成Double类型
            </summary>
            <param name="s"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToDouble(System.String)">
            <summary>
            转换成Double类型
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToString3(System.String)">
            <summary>
            1.1000进来 1.1返回
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.IsDateTime(System.String)">
            <summary>
            判断是否日期格式
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.Helper.StringExtension.ToString2(System.Decimal)">
            <summary>
            保留小数点后面2至4位,去除末尾多余0
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.Helper.StringHelper">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:Dos.Common.Helper.StringHelper.Length(System.String)">
            <summary>
            获取字节数
            str：需要获取的字符串
            </summary>
        </member>
        <member name="M:Dos.Common.Helper.StringHelper.SubString(System.String,System.Int32)">
            <summary>
            按字节数截取指定字节
            </summary>
            <Param name="str">需要获取的字符串</Param>
            <Param name="length">获取的字节长度</Param>
            <returns></returns>
        </member>
        <member name="F:Dos.Common.JSONParameters.UseOptimizedDatasetSchema">
            <summary>
            Use the optimized fast Dataset Schema format (default = True)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.UseFastGuid">
            <summary>
            Use the fast GUID format (default = True)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.SerializeNullValues">
            <summary>
            Serialize null values to the output (default = True)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.UseUTCDateTime">
            <summary>
            Use the UTC date format (default = True)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.ShowReadOnlyProperties">
            <summary>
            Show the readonly properties of types in the output (default = False)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.UsingGlobalTypes">
            <summary>
            Use the $types extension to optimise the output json (default = True)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.IgnoreCaseOnDeserialize">
            <summary>
            Ignore case when processing json and deserializing 
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.EnableAnonymousTypes">
            <summary>
            Anonymous types have read only properties 
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.UseExtensions">
            <summary>
            Enable fastJSON extensions $types, $type, $map (default = True)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.UseEscapedUnicode">
            <summary>
            Use escaped unicode i.e. \uXXXX format for non ASCII characters (default = True)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.KVStyleStringDictionary">
            <summary>
            Output string key dictionaries as "k"/"v" format (default = False) 
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.UseValuesOfEnums">
            <summary>
            Output Enum values instead of names (default = False)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.IgnoreAttributes">
            <summary>
            Ignore attributes to check for (default : XmlIgnoreAttribute)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.ParametricConstructorOverride">
            <summary>
            If you have parametric and no default constructor for you classes (default = False)
            
            IMPORTANT NOTE : If True then all initial values within the class will be ignored and will be not set
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.DateTimeMilliseconds">
            <summary>
            Serialize DateTime milliseconds i.e. yyyy-MM-dd HH:mm:ss.nnn (default = false)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.SerializerMaxDepth">
            <summary>
            Maximum depth for circular references in inline mode (default = 20)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.InlineCircularReferences">
            <summary>
            Inline circular or already seen objects instead of replacement with $i (default = False) 
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.SerializeToLowerCaseNames">
            <summary>
            Save property/field names as lowercase (default = false)
            </summary>
        </member>
        <member name="F:Dos.Common.JSONParameters.DataTableToGeneralJson">
            <summary>
            DataTable类型是否默认序列化TableName (default = true) by itdos.com
            </summary>
        </member>
        <member name="F:Dos.Common.JSON.Parameters">
            <summary>
            Globally set-able parameters for controlling the serializer
            </summary>
        </member>
        <member name="M:Dos.Common.JSON.ToNiceJSON(System.Object,Dos.Common.JSONParameters)">
            <summary>
            Create a formatted json string (beautified) from an object
            </summary>
            <param name="obj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.ToJSON(System.Object)">
            <summary>
            Create a json representation for an object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.ToJSON(System.Object,Dos.Common.JSONParameters)">
            <summary>
            Create a json representation for an object with parameter override on this call
            </summary>
            <param name="obj"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.Parse(System.String)">
            <summary>
            Parse a json string and generate a Dictionary&lt;string,object&gt; or List&lt;object&gt; structure
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.ToObject``1(System.String)">
            <summary>
            Create a typed generic object from the json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.ToObject``1(System.String,Dos.Common.JSONParameters)">
            <summary>
            Create a typed generic object from the json with parameter override on this call
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.ToObject(System.String)">
            <summary>
            Create an object from the json
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.ToObject(System.String,Dos.Common.JSONParameters)">
            <summary>
            Create an object from the json with parameter override on this call
            </summary>
            <param name="json"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.ToObject(System.String,System.Type)">
            <summary>
            Create an object of type from the json
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.FillObject(System.Object,System.String)">
            <summary>
            Fill a given object with the json represenation
            </summary>
            <param name="input"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.DeepCopy(System.Object)">
            <summary>
            Deep copy an object i.e. clone to a new object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.DeepCopy``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.Beautify(System.String)">
            <summary>
            Create a human readable string from the json 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.JSON.RegisterCustomType(System.Type,Dos.Common.Serialize,Dos.Common.Deserialize)">
            <summary>
            Register custom type handlers for your own types not natively handled by fastJSON
            </summary>
            <param name="type"></param>
            <param name="serializer"></param>
            <param name="deserializer"></param>
        </member>
        <member name="M:Dos.Common.JSON.ClearReflectionCache">
            <summary>
            Clear the internal reflection cache so you can start from new (you will loose performance)
            </summary>
        </member>
        <member name="T:Dos.Common.JsonParser">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            </summary>
        </member>
        <member name="T:Dos.Common.JsonProp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.JsonProp.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="M:Dos.Common.JsonProp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dos.Common.JsonProp"/> class.
            </summary>
        </member>
        <member name="M:Dos.Common.JsonProp.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dos.Common.JsonProp"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Dos.Common.CacheHelper">
            <summary>
            缓存处理类
            </summary>
        </member>
        <member name="F:Dos.Common.CacheHelper.cache">
            <summary>
            cache
            </summary>
        </member>
        <member name="F:Dos.Common.CacheHelper._timeOut">
            <summary>
            timeout 600秒
            </summary>
        </member>
        <member name="M:Dos.Common.CacheHelper.Set(System.String,System.Object)">
            <summary>
            添加缓存 (绝对有效期)
            </summary>
            <Param name="cacheKey">缓存键值</Param>
            <Param name="cacheValue">缓存内容</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.Set(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存 (绝对有效期)
            </summary>
            <Param name="cacheKey">缓存键值</Param>
            <Param name="cacheValue">缓存内容</Param>
            <Param name="timeout">绝对有效期（单位: 秒）</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheSlidingExpiration(System.String,System.Object)">
            <summary>
            添加缓存 (相对有效期)
            </summary>
            <Param name="cacheKey">缓存键值</Param>
            <Param name="cacheValue">缓存内容</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheSlidingExpiration(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存 (相对有效期)
            </summary>
            <Param name="cacheKey">缓存键值</Param>
            <Param name="cacheValue">缓存内容</Param>
            <Param name="timeout">相对过期时间 (单位: 秒)</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheFilesDependency(System.String,System.Object,System.String[])">
            <summary>
            添加缓存 (文件依赖)
            </summary>
            <Param name="cacheKey">缓存键值</Param>
            <Param name="cacheValue">缓存内容</Param>
            <Param name="filenames">缓存依赖的文件或目录</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheDependency(System.String,System.Object,System.Int32,System.Web.Caching.CacheDependency)">
            <summary>
            添加缓存 (文件依赖)
            </summary>
            <Param name="cacheKey">缓存键值</Param>
            <Param name="cacheValue">缓存内容</Param>
            <Param name="timeout">绝对过期时间 （单位：秒）</Param>
            <Param name="dep">缓存依赖</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.AddCacheKeysDependency(System.String,System.Object,System.String[])">
            <summary>
            添加缓存 (一组键值依赖)
            </summary>
            <Param name="cacheKey">缓存键值</Param>
            <Param name="cacheValue">缓存内容</Param>
            <Param name="cachekeys">一组缓存键，此改变缓存也失效</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.onRemove(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            缓存删除的委托实例
            </summary>
            <Param name="key"></Param>
            <Param name="val"></Param>
            <Param name="reason"></Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <Param name="cacheKey">缓存键值</Param>
        </member>
        <member name="M:Dos.Common.CacheHelper.Get(System.String)">
            <summary>
            获取缓存。若没有设置过传入的cacheKey，则返回null
            </summary>
            <Param name="cacheKey">对象的关键字</Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CacheHelper.GetCount">
            <summary>
            获取缓存数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CacheHelper.GetKeys">
            <summary>
            返回缓存键值列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CacheHelper.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="T:Dos.Common.CmdHelper">
            <summary>
            Dos cmd命令执行帮助类
            </summary>
        </member>
        <member name="M:Dos.Common.CmdHelper.Run(System.String)">
            <summary>
            运行dos命令
            </summary>
            <Param name="command"></Param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.ConvertHelper">
            <summary>
            通用转换类
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dos.Common.ConvertHelper.EnumToDictionary(System.Type)" -->
        <member name="T:Dos.Common.CookieHelper">
            <summary>
            Cookie操作类
            </summary>
        </member>
        <member name="M:Dos.Common.CookieHelper.Remove(System.String)">
            <summary>
            
            </summary>
            <Param name="cookieName"></Param>
        </member>
        <member name="M:Dos.Common.CookieHelper.RemoveDefault">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.CookieHelper.Get(System.String)">
            <summary>
            
            </summary>
            <Param name="cookieName"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CookieHelper.Get(System.String,System.String)">
            <summary>
            
            </summary>
            <Param name="fatherCookieName"></Param>
            <Param name="cookieName"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.CookieHelper.Set(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <Param name="cookieName"></Param>
            <Param name="cookieValue"></Param>
            <Param name="expires">设置cookie过期时间，单位：秒。</Param>
        </member>
        <member name="F:Dos.Common.EncryptHelper._Key">
            <summary>
            密钥
            </summary>
        </member>
        <member name="M:Dos.Common.EncryptHelper.DESEncode(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <Param name="encryptString">待加密的字符串</Param>
            <Param name="Key">8位加密Key</Param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Dos.Common.EncryptHelper.DESEncode(System.String)">
            <summary>
            DES加密字符串
            </summary>
            <Param name="encryptString">待加密的字符串</Param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Dos.Common.EncryptHelper.DESDecode(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <Param name="decryptString">待解密的字符串</Param>
            <Param name="Key">8位解密Key</Param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:Dos.Common.EncryptHelper.DESDecode(System.String)">
            <summary>
            DES解密字符串
            </summary>
            <Param name="decryptString">待解密的字符串</Param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:Dos.Common.EncryptHelper.MD5Encrypt(System.String,System.Int32)">
            <summary>
            MD5加密，返回MD5 16位或32位加密后的字符串，默认返回16位。code输入16或32
            </summary>
            <Param name="str">原始字符串</Param>
            <Param name="code">MD5返回16位还是32位？请输入16或32</Param>
        </member>
        <member name="M:Dos.Common.EncryptHelper.MD5Encrypt(System.String)">
            <summary>
            MD5加密，返回MD5 16位或32位加密后的字符串，默认返回16位。
            </summary>
            <Param name="str">原始字符串</Param>
        </member>
        <member name="M:Dos.Common.EncryptHelper.MD5EncryptWeChat(System.String,System.String)">
            <summary>
            获取大写的MD5签名结果
            </summary>
            <param name="encypStr"></param>
            <param name="charset">默认值：utf-8</param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.FileHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.FileHelper.Read(System.String,System.Text.Encoding)">
            <summary>
            从文件中读取所有内容。（如果文件不存在，返回空字符串）
            </summary>
            <Param name="filePath">完整路径，如D:\Temp\Temp.json</Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.FileHelper.Write(System.String,System.String,System.Text.Encoding)">
            <summary>
            往文件中写内容。（如果文件已存在，则会删除文件再创建。反之直接创建文件）
            </summary>
            <Param name="filePath">完整路径，如D:\Temp\Temp.json</Param>
            <Param name="content">内容。可以\r\n换行。</Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.FileHelper.Copy(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fromDir"></param>
            <param name="toDir"></param>
        </member>
        <member name="M:Dos.Common.FileHelper.Copy(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Dos.Common.FileHelper.ReadStream(System.String)">
            <summary>
            根据完整文件路径获取FileStream
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.IPHelper">
            <summary>
            IP帮助类
            </summary>
        </member>
        <member name="M:Dos.Common.IPHelper.GetVisitorIP">
            <summary>
            获取访问者IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.HttpHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.HttpHelper.GetStream(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.GetStream(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="getParam"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.PostStream(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.PostStream(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="postParam"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.PostFile(Dos.Common.HttpParam)">
            <summary>
            文件上传至远程服务器。传入：Url、CookieContainer、PostParam、PostedFile
            </summary>
        </member>
        <member name="M:Dos.Common.HttpHelper.RequestStream(Dos.Common.HttpParam)">
            <summary>
            获取响应流
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.RequestString(Dos.Common.HttpParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="getParam"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get(Dos.Common.HttpParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get``1(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get``1(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="getParam"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Get``1(Dos.Common.HttpParam)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="postParam"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post(Dos.Common.HttpParam)">
            <summary>
            
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post``1(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post``1(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="postParam"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.HttpHelper.Post``1(Dos.Common.HttpParam)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.LogHelper">
            <summary>
            日志帮助类。AppSettings节点可以配置Dos.LogHelper.Debug=0或Dos.LogHelper.Error=0来关闭日志记录。
            如果不传入path参数，默认是在~/Log/下生成日志文件，也可以在AppSettings节点配置Dos.LogHelper.Path来设置默认日志文件路径，格式：D:\\File\\Log\\。
            </summary>
        </member>
        <member name="M:Dos.Common.LogHelper.Debug(System.String,System.String,System.String)">
            <summary>
            记录调试日志
            </summary>
            <Param name="content">内容。如需换行可使用：\r\n</Param>
            <Param name="filePrefixName"></Param>
            <Param name="path">格式：D:\\File\\Logs\\</Param>
        </member>
        <member name="M:Dos.Common.LogHelper.Error(System.String,System.String,System.String)">
            <summary>
            记录错误日志
            </summary>
            <Param name="content">内容。如需换行可使用：\r\n</Param>
            <Param name="filePrefixName"></Param>
            <Param name="path">格式：D:\\File\\Logs\\</Param>
        </member>
        <member name="M:Dos.Common.LogHelper.Write(Dos.Common.LogHelper.LogHelperType,System.String,System.String,System.String)">
            <summary>
            filePrefixName是文件名前缀，最好用中文，方便在程序Logs文件下查看。
            </summary>
            <Param name="content">内容。如需换行可使用：\r\n</Param>
            <Param name="filePrefixName"></Param>
            <Param name="path"></Param>
            <Param name="logtype"></Param>
        </member>
        <member name="T:Dos.Common.MsmqHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Init``1(Dos.Common.MsmqParam)">
            <summary>
            初始化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Init(Dos.Common.MsmqParam)">
            <summary>
            初始化
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dos.Common.MsmqHelper.CreateMessageQueue(System.String)">
            <summary>
            创建MessageQueue
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Dos.Common.MsmqHelper.NewMessageQueue``1(System.String)">
            <summary>
            实例化MessageQueue
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.#ctor(System.String)">
            <summary>
            传入自定义队列名。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.#ctor(Dos.Common.MsmqParam)">
            <summary>
            传入各种参数。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Send``1(``0)">
            <summary>
            发送消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Dos.Common.MsmqHelper.SendAndReceiveAsyn``1(``0,System.Action{``0},System.Boolean)">
            <summary>
            发送消息并异步接收一个消息。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.ReceiveAsyn``1(System.Action{``0},System.Boolean)">
            <summary>
            异步接收消息。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.ReceiveAsynLoop``1(System.Action{``0})">
            <summary>
            异步接收消息，常驻内存，一直等待接收新的队列并触发回调函数。
            </summary>
            <param name="callBack"></param>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Receive``1">
            <summary>
            接收消息。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Send``1(Dos.Common.MsmqParam{``0})">
            <summary>
            发送消息。必传Message。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.SendAndReceiveAsyn``1(Dos.Common.MsmqParam{``0},System.Action{``0},System.Boolean)">
            <summary>
            发送消息并异步接收一个消息。必传Message。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Send``1(System.String,``0)">
            <summary>
            发送消息。必传QueueName、Message。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.SendAndReceiveAsyn``1(System.String,``0,System.Action{``0},System.Boolean)">
            <summary>
            发送消息。必传QueueName、Message。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.ReceiveAsyn``1(Dos.Common.MsmqParam{``0},System.Boolean)">
            <summary>
            异步接收消息。必传CallBack
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.ReceiveAsyn``1(System.String,System.Action{``0})">
            <summary>
            异步接收消息。必传QueueName、CallBack
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.ReceiveAsynLoop``1(System.String,System.Action{``0})">
            <summary>
            异步接收消息。必传QueueName、CallBack。常驻内存，一直等待接收新的队列并触发回调函数。
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Receive``1(Dos.Common.MsmqParam{``0})">
            <summary>
            接收消息
            </summary>
        </member>
        <member name="M:Dos.Common.MsmqHelper.Receive``1(System.String)">
            <summary>
            接收消息。必传QueueName
            </summary>
        </member>
        <member name="T:Dos.Common.MsmqParam`1">
            <summary>
            参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Dos.Common.MsmqParam`1.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.MsmqParam`1.CallBack">
            <summary>
            callBack
            </summary>
        </member>
        <member name="T:Dos.Common.MsmqParam">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Dos.Common.MsmqParam.QueueName">
            <summary>
            队列名称
            </summary>
        </member>
        <member name="F:Dos.Common.MsmqParam._queuePath">
            <summary>
            队列名称
            </summary>
        </member>
        <member name="P:Dos.Common.MsmqParam.QueuePath">
            <summary>
            路径
            </summary>
        </member>
        <member name="T:Dos.Common.RegexHelper">
            <summary>
            正则帮助类。含大量常用正则表达式。
            </summary>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsMobilePhone(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsBase64String(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsGuid(System.String)">
            <summary>
            
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsIdCard(System.String)">
            <summary>
            
            </summary>
            <param name="idCard"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsInt(System.Object)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsInt(System.String)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsNullOrEmpty(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsNumber(System.Object)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsNumber(System.String)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsUrl(System.String)">
            <summary>
            
            </summary>
            <param name="strUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.IsMacAddress(System.String)">
            <summary>
            判断是否是mac地址
            </summary>
            <Param name="mac">mac地址字符串</Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.RegexHelper.RemoveHtml(System.String)">
             <summary>
             去除HTML标记  
             </summary>   
             <param name="htmlString">包括HTML的源码</param>
             <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:Dos.Common.RegexHelper.Length(System.String)">
            <summary>
            获取字节数
            str：需要获取的字符串
            </summary>
        </member>
        <member name="M:Dos.Common.RegexHelper.SubString(System.String,System.Int32)">
            <summary>
            按字节数截取指定字节
            </summary>
            <Param name="str">需要获取的字符串</Param>
            <Param name="length">获取的字节长度</Param>
            <returns></returns>
        </member>
        <member name="T:Dos.Common.ImageHelper">
            <summary>
            图片水印处理类
            </summary>
        </member>
        <member name="T:Dos.Common.ImageHelper.ThumbnailModeOption">
            <summary>
            生成缩略图的模式， WH-指定宽高缩放（可能变形） W-指定宽，高按比例  H-指定高，宽按比例 CUT-指定高宽裁减（不变形,推荐用这个）。
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.WH">
            <summary>
            指定宽高缩放（可能变形）
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.W">
            <summary>
            指定宽，高按比例
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.H">
            <summary>
            指定高，宽按比例
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.ThumbnailModeOption.CUT">
            <summary>
            指定高宽裁减（不变形,推荐用这个）
            </summary>
        </member>
        <member name="T:Dos.Common.ImageHelper.WaterPositionOption">
            <summary>
            加图片水印的位置，TopLeft-左上角 TopCenter-上中间 TopRight-右上角 BottomLeft-左下角 BottomCenter-下中间 右下角-右下角 Middle-正中间。
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.LeftTop">
            <summary>
            左上角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.CenterTop">
            <summary>
            上中间
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.RightTop">
            <summary>
            右上角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.LeftBottom">
            <summary>
            左下角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.CenterBottom">
            <summary>
            下中间
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.RightBottom">
            <summary>
            右下角
            </summary>
        </member>
        <member name="F:Dos.Common.ImageHelper.WaterPositionOption.Middle">
            <summary>
            正中间
            </summary>
        </member>
        <member name="M:Dos.Common.ImageHelper.GetImageFormat(System.String)">
            <summary>
            获取图片格式。
            </summary>
            <Param name="fileName">文件名</Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.ImageHelper.MakeWaterImage(System.IO.Stream,System.String,System.String,System.String,System.Int32,Dos.Common.ImageHelper.WaterPositionOption)">
            <summary>
            加水印图片并保存。
            </summary>
            <Param name="originalImageStream">Stream</Param>
            <Param name="strFileName">源图路径（物理路径）</Param>
            <Param name="savePath">图片保存路径（物理路径）</Param>
            <Param name="waterPath">水印图路径（物理路径）</Param>
            <Param name="edge">水印图离原图边界的距离</Param>
            <Param name="position">加图片水印的位置</Param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dos.Common.ImageHelper.MakeThumbnail(System.IO.Stream,System.String,System.String,System.Int32,System.Int32,Dos.Common.ImageHelper.ThumbnailModeOption)">
            <summary>
            生成缩略图并保存。
            </summary>
            <Param name="originalImageStream">Stream</Param>
            <Param name="strFileName">源图路径（物理路径）</Param>
            <Param name="thumbnailPath">缩略图路径（物理路径）</Param>
            <Param name="maxWidth">缩略图最大宽度</Param>
            <Param name="maxheight">缩略图最大高度</Param>
            <Param name="mode">生成缩略图的方式</Param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dos.Common.ImageHelper.MakeThumbnailWater(System.IO.Stream,System.String,System.String,System.Int32,System.Int32,Dos.Common.ImageHelper.ThumbnailModeOption,System.String,System.Int32,Dos.Common.ImageHelper.WaterPositionOption)">
            <summary>
            生成缩略图并打水印再保存。
            </summary>
            <Param name="originalImageStream">Stream</Param>
            <Param name="strFileName">源图路径（物理路径）</Param>
            <Param name="thumbnailPath">缩略图路径（物理路径）</Param>
            <Param name="maxWidth">缩略图最大宽度</Param>
            <Param name="maxheight">缩略图最大高度</Param>
            <Param name="mode">生成缩略图的方式</Param>
            <Param name="waterPath">水印图路径（物理路径）</Param>
            <Param name="edge">水印图离原图边界的距离</Param>
            <Param name="position">加图片水印的位置</Param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Dos.Common.BaseResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <Param name="isSuccess"></Param>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean,System.Object)">
            <summary>
            构造函数
            </summary>
            <Param name="isSuccess"></Param>
            <Param name="data"></Param>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean,System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <Param name="isSuccess"></Param>
            <Param name="data"></Param>
            <Param name="message"></Param>
        </member>
        <member name="M:Dos.Common.BaseResult.#ctor(System.Boolean,System.Object,System.String,System.Int32)">
            <summary>
            
            </summary>
            <Param name="isSuccess"></Param>
            <Param name="data"></Param>
            <Param name="message"></Param>
            <Param name="dataCount"></Param>
        </member>
        <member name="P:Dos.Common.BaseResult.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Dos.Common.BaseResult.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Dos.Common.BaseResult.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Dos.Common.BaseResult.DataCount">
            <summary>
            数量数量
            </summary>
        </member>
        <member name="T:Dos.Common.XLinqHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AllElements(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AllElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AnyAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AnyElement(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AnyElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.AssertElementHasValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.FirstElement(System.Xml.Linq.XElement)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetBool(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetBoolOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDateTime(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDateTimeOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDecimal(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetDecimalOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetElementValueOrDefault``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetGuid(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetGuidOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetInt(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetIntOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetLong(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetLongOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableBool(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableDateTime(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableDecimal(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableGuid(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableInt(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableLong(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetNullableTimeSpan(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetString(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetTimeSpan(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetTimeSpanOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dos.Common.XLinqHelper.GetValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dos.Common.DataTablesResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.DataTablesResult.data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.DataTablesResult.draw">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.DataTablesResult.recordsFiltered">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.DataTablesResult.recordsTotal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dos.Common.HttpParam">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.Method">
            <summary>
            GET/POST
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.PostParam">
            <summary>
            Post参数。
            <para>可以传入Json对像：new { Key1 = Value1, Key2 = Value2}</para>
            <para>可以传入Json字符串：{"Key1":"Value1","Key2":"Value2"}</para>
            <para>可以传入key/value字符串："ke=value＆key=value"</para>
            <para>可以传入xml字符串等等</para>
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.GetParam">
            <summary>
            Get参数
            <para>可以传入Json对像：new { Key1 = Value1, Key2 = Value2}</para>
            <para>可以传入Json字符串：{"Key1":"Value1","Key2":"Value2"}</para>
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.TimeOut">
            <summary>
            请求超时时间。单位：秒。默认值5秒。
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.CookieContainer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.Referer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.CertPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.CertPwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.UserAgent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dos.Common.HttpParam.PostedFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dos.Common.QueueHelper">
            <summary>
            队列操作类
            </summary>
        </member>
        <member name="T:Dos.Common.QueueHelper.QueueParam">
            <summary>
            队列参数
            </summary>
        </member>
        <member name="P:Dos.Common.QueueHelper.QueueParam.QueueCount">
            <summary>
            队列限制数量
            </summary>
        </member>
        <member name="P:Dos.Common.QueueHelper.QueueParam.Pool">
            <summary>
            队列池
            </summary>
        </member>
        <member name="F:Dos.Common.QueueHelper.Param">
            <summary>
            队列参数
            </summary>
        </member>
        <member name="M:Dos.Common.QueueHelper.#ctor">
            <summary>
            初始化队列
            </summary>
        </member>
        <member name="M:Dos.Common.QueueHelper.#ctor(Dos.Common.QueueHelper.QueueParam)">
            <summary>
            初始化队列。可动态传入QueueCount
            </summary>
        </member>
        <member name="M:Dos.Common.QueueHelper.In(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.In(System.String,System.Object)">
            <summary>
            加入队列。成功加入队列后必须在外部手动执行退出队列：QueueHelper对象.Out(string key)。
            </summary>
            <Param name="key">资源Key</Param>
            <Param name="obj"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.TryGet(System.String,System.Object)">
            <summary>
            抢资源
            </summary>
            <Param name="key"></Param>
            <Param name="obj"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.Out(System.String)">
            <summary>
            退出队列/释放资源
            </summary>
            <Param name="key"></Param>
        </member>
        <member name="M:Dos.Common.QueueHelper.OutAll">
            <summary>
            退出所有队列/释放所有资源
            </summary>
        </member>
        <member name="F:Dos.Common.QueueHelper.RetryCount">
            <summary>
            尝试入队次数
            </summary>
        </member>
        <member name="F:Dos.Common.QueueHelper.staticPool">
            <summary>
            静态队列池
            </summary>
        </member>
        <member name="F:Dos.Common.QueueHelper.SleepNumber">
            <summary>
            睡眠时间（毫秒）
            </summary>
        </member>
        <member name="M:Dos.Common.QueueHelper.StaticIn(System.String)">
            <summary>
            加入队列
            </summary>
            <Param name="key"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.StaticIn(System.String,System.Object)">
            <summary>
            加入队列。成功加入队列后必须在外部手动执行退出队列：QueueHelper.Out(string key)。
            </summary>
            <Param name="key">资源Key</Param>
            <Param name="obj"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.StaticTryGet(System.String,System.Object)">
            <summary>
            抢资源
            </summary>
            <Param name="key"></Param>
            <Param name="obj"></Param>
            <returns></returns>
        </member>
        <member name="M:Dos.Common.QueueHelper.StaticOut(System.String)">
            <summary>
            退出队列/释放资源
            </summary>
            <Param name="key"></Param>
        </member>
        <member name="M:Dos.Common.QueueHelper.StaticOutAll">
            <summary>
            退出所有队列/释放所有资源
            </summary>
        </member>
        <member name="T:EmitMapper.AST.Nodes.AstIfNull">
            <summary>
            Generates "value ?? ifNullValue" expression.
            </summary>
        </member>
        <member name="T:EmitMapper.DynamicAssemblyManager">
            <summary>
            Class which maintains an assembly for created object Mappers
            </summary>
        </member>
        <member name="M:EmitMapper.DynamicAssemblyManager.SaveAssembly">
            <summary>
            Saves assembly with created Mappers to file. This method is useful for debugging purpose.
            </summary>
        </member>
        <member name="M:EmitMapper.EmitBuilders.BuilderUtils.InitializeLocal(System.Reflection.Emit.LocalBuilder,System.Int32)">
            <summary>
            Copies an argument to local variable
            </summary>
            <Param name="loc"></Param>
            <Param name="argIndex"></Param>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.Mappers.MapperForClassImpl">
            <summary>
            Mapper for classes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:EmitMapper.Mappers.MapperForCollectionImpl" -->
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.MapImpl(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <Param name="from">Source object</Param>
            <Param name="to">Destination object</Param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.Map(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <Param name="from">Source object</Param>
            <Param name="to">Destination object</Param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.IsSupportedType(System.Type)">
            <summary>
            Returns true if specified type is supported by this Mapper
            </summary>
            <Param name="type"></Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.Mappers.MapperForCollectionImpl.CreateInstance(System.String,EmitMapper.ObjectMapperManager,System.Type,System.Type,EmitMapper.ObjectsMapperDescr,EmitMapper.IMappingConfigurator)">
            <summary>
            Creates an instance of Mapper for collections.
            </summary>
            <Param name="MapperName">Mapper name. It is used for registration in Mappers repositories.</Param>
            <Param name="mapperMannager">Mappers manager</Param>
            <Param name="TypeFrom">Source type</Param>
            <Param name="TypeTo">Destination type</Param>
            <Param name="SubMapper"></Param>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.Mappers.ObjectsMapperBaseImpl">
            <summary>
            Base class for Mappers
            </summary>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.Map(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <Param name="from">Source object</Param>
            <Param name="to">Destination object</Param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.Map(System.Object)">
            <summary>
            Creates new instance of destination object and initializes it by values from "from" object
            </summary>
            <Param name="from">source object</Param>
            <returns></returns>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.mapperMannager">
            <summary>
            Mapper manager
            </summary>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.typeFrom">
            <summary>
            Type of source object
            </summary>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.typeTo">
            <summary>
            Type of destination object
            </summary>
        </member>
        <member name="F:EmitMapper.Mappers.ObjectsMapperBaseImpl.ShallowCopy">
            <summary>
            True, if reference properties and members of same type should
            be copied by reference (shallow copy, without creating new instance for destination object)
            </summary>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.MapImpl(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <Param name="from">Source object</Param>
            <Param name="to">Destination object</Param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitMapper.Mappers.ObjectsMapperBaseImpl.CreateTargetInstance">
            <summary>
            Creates an instance of destination object
            </summary>
            <returns>Destination object</returns>
        </member>
        <member name="T:EmitMapper.MappingConfiguration.CustomConverterDescriptor">
            <summary>
            Detailed description of a generic converter. 
            </summary>
        </member>
        <member name="P:EmitMapper.MappingConfiguration.CustomConverterDescriptor.ConverterImplementation">
            <summary>
            Type of class which performs conversion. This class can be generic which will be parameterized with types 
            returned from "ConverterClassTypeArguments" property.
            </summary>
        </member>
        <member name="P:EmitMapper.MappingConfiguration.CustomConverterDescriptor.ConversionMethodName">
            <summary>
            Name of conversion method of class returned from "ConverterImplementation" property.
            </summary>
        </member>
        <member name="P:EmitMapper.MappingConfiguration.CustomConverterDescriptor.ConverterClassTypeArguments">
            <summary>
            Type arguments for parameterizing generic converter determined by "ConverterImplementation" property.
            </summary>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.ShallowMap``1">
            <summary>
            Define shallow map mode for the specified type. In that case all members of this type will be copied by reference if it is possible
            </summary>
            <typeparam name="T">Type for which shallow map mode is defining</typeparam>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.ShallowMap(System.Type)">
            <summary>
            Define shallow map mode for the specified type. In that case all members of this type will be copied by reference if it is possible
            </summary>
            <Param name="type">Type for which shallow map mode is defining</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.ShallowMap">
            <summary>
            Define default shallow map mode. In that case all members will be copied by reference (if it is possible) by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.DeepMap``1">
            <summary>
            Define deep map mode for the specified type. In that case all members of this type will be copied by value (new instances will be created)
            </summary>
            <typeparam name="T">Type for which deep map mode is defining</typeparam>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.DeepMap(System.Type)">
            <summary>
            Define deep map mode for the specified type. In that case all members of this type will be copied by value (new instances will be created)
            </summary>
            <Param name="type">Type for which deep map mode is defining</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.DeepMap">
            <summary>
            Define default deep map mode. In that case all members will be copied by value (new instances will be created) by default
            </summary>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.DefaultMapConfig.MatchMembers(System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Define a function to test two members if they have identical names.
            </summary>
            <Param name="membersMatcher">Function to test two members if they have identical names. For example if you want to match members ignoring case you can define the following function: (m1, m2) => m1.ToUpper() == m2.ToUpper()</Param>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.MappingConfiguration.ICustomConverterProvider">
            <summary>
            Provider for getting detailed information about generic conversion
            </summary>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.ICustomConverterProvider.GetCustomConverterDescr(System.Type,System.Type,EmitMapper.MappingConfiguration.MapConfigBaseImpl)">
            <summary>
            Getting detailed information about generic conversion
            </summary>
            <Param name="from">Type of source. Can be also generic class or abstract array.</Param>
            <Param name="to">Type of destination. Can be also generic class or abstract array.</Param>
            <Param name="mappingConfig">Current mapping configuration</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.ConvertUsing``2(System.Func{``0,``1})">
            <summary>
            Define custom type converter
            </summary>
            <typeparam name="From">Source type</typeparam>
            <typeparam name="To">Destination type</typeparam>
            <Param name="converter">Function which converts an inctance of the source type to an instance of the destination type</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.ConvertGeneric(System.Type,System.Type,EmitMapper.MappingConfiguration.ICustomConverterProvider)">
            <summary>
            Define conversion for a generic. It is able to convert not one particular class but all generic family
            providing a generic converter.
            </summary>
            <Param name="from">Type of source. Can be also generic class or abstract array.</Param>
            <Param name="to">Type of destination. Can be also generic class or abstract array.</Param>
            <Param name="converterProvider">
            Provider for getting detailed information about generic conversion.
            </Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.NullSubstitution``2(System.Func{System.Object,``1})">
            <summary>
            Setup function which returns value for destination if appropriate source member is null. 
            </summary>
            <typeparam name="TFrom">Type of source member</typeparam>
            <typeparam name="TTo">Type of destination member</typeparam>
            <Param name="nullSubstitutor">Function which returns value for destination if appropriate source member is null</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.IgnoreMembers(System.Type,System.Type,System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <Param name="typeFrom">Source type for which ignore members are defining</Param>
            <Param name="typeTo">Destination type for which ignore members are defining</Param>
            <Param name="ignoreNames">Array of member names which should be ingored</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.IgnoreMembers``2(System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <typeparam name="TFrom">Source type for which ignore members are defining</typeparam>
            <typeparam name="TTo">Destination type for which ignore members are defining</typeparam>
            <Param name="ignoreNames">Array of member names which should be ingored</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.ConstructBy``1(EmitMapper.MappingConfiguration.MappingOperations.TargetConstructor{``0})">
            <summary>
            Define a custom constructor for the specified type
            </summary>
            <typeparam name="T">Type for which constructor is defining</typeparam>
            <Param name="constructor">Custom constructor</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.PostProcess``1(EmitMapper.MappingConfiguration.MappingOperations.ValuesPostProcessor{``0})">
            <summary>
            Define postprocessor for specified type
            </summary>
            <typeparam name="T">Objects of this type and all it's descendants will be postprocessed</typeparam>
            <Param name="postProcessor"></Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBase`1.SetConfigName(System.String)">
            <summary>
            Set unique configuration name to force Emit Mapper create new mapper instead using appropriate cached one.
            </summary>
            <Param name="mapperName">Configuration name</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.ConvertUsing``2(System.Func{``0,``1})">
            <summary>
            Define custom type converter
            </summary>
            <typeparam name="From">Source type</typeparam>
            <typeparam name="To">Destination type</typeparam>
            <Param name="converter">Function which converts an inctance of the source type to an instance of the destination type</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.ConvertGeneric(System.Type,System.Type,EmitMapper.MappingConfiguration.ICustomConverterProvider)">
            <summary>
            Define conversion for a generic. It is able to convert not one particular class but all generic family
            providing a generic converter.
            </summary>
            <Param name="from">Type of source. Can be also generic class or abstract array.</Param>
            <Param name="to">Type of destination. Can be also generic class or abstract array.</Param>
            <Param name="converterProvider">Provider for getting detailed information about generic conversion</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.NullSubstitution``2(System.Func{System.Object,``1})">
            <summary>
            Setup function which returns value for destination if appropriate source member is null. 
            </summary>
            <typeparam name="TFrom">Type of source member</typeparam>
            <typeparam name="TTo">Type of destination member</typeparam>
            <Param name="nullSubstitutor">Function which returns value for destination if appropriate source member is null</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.IgnoreMembers(System.Type,System.Type,System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <Param name="typeFrom">Source type for which ignore members are defining</Param>
            <Param name="typeTo">Destination type for which ignore members are defining</Param>
            <Param name="ignoreNames">Array of member names which should be ingored</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.IgnoreMembers``2(System.String[])">
            <summary>
            Define members which should be ingored
            </summary>
            <typeparam name="TFrom">Source type for which ignore members are defining</typeparam>
            <typeparam name="TTo">Destination type for which ignore members are defining</typeparam>
            <Param name="ignoreNames">Array of member names which should be ingored</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.ConstructBy``1(EmitMapper.MappingConfiguration.MappingOperations.TargetConstructor{``0})">
            <summary>
            Define a custom constructor for the specified type
            </summary>
            <typeparam name="T">Type for which constructor is defining</typeparam>
            <Param name="constructor">Custom constructor</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.PostProcess``1(EmitMapper.MappingConfiguration.MappingOperations.ValuesPostProcessor{``0})">
            <summary>
            Define postprocessor for specified type
            </summary>
            <typeparam name="T">Objects of this type and all it's descendants will be postprocessed</typeparam>
            <Param name="postProcessor"></Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.MappingConfiguration.MapConfigBaseImpl.SetConfigName(System.String)">
            <summary>
            Set unique configuration name to force Emit Mapper create new mapper instead using appropriate cached one.
            </summary>
            <Param name="mapperName">Configuration name</Param>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.MappingConfiguration.MappingOperations.ReadWriteComplex">
            <summary>
            Generates the following code:
            var tempSrc = Source.member;
            if(tempSrc == null)
            {
                Destination.member = null;
            }
            else
            {
                var tempDst = Destination.member;
                if(tempDst == null)
                {
                    tempDst = new DestinationMemberType();
                }
                // Operations:
                tempDst.fld1 = tempSrc.fld1;
                tempDst.fld2 = tempSrc.fld2;
                ...
                Destination.member = tempDst;
            }
            </summary>
        </member>
        <member name="M:EmitMapper.IMappingConfigurator.GetMappingOperations(System.Type,System.Type)">
            <summary>
            Get list of mapping operations. Each mapping mapping defines one copieng operation from source to destination. For this operation can be additionally defined the following custom operations: 
            - Custom getter which extracts values from source
            - Custom values converter which converts extracted from source value
            - Custom setter which writes value to destination
            </summary>
            <Param name="from">Source type</Param>
            <Param name="to">Destination type</Param>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.IMappingConfigurator.GetConfigurationName">
            <summary>
            Get unique configuration name to force Emit Mapper create new mapper instead using appropriate cached one.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EmitMapper.ObjectMapperManager">
            <summary>
            Class for maintaining and generating Mappers.
            </summary>
        </member>
        <member name="M:EmitMapper.ObjectMapperManager.GetMapper``2">
            <summary>
            Returns a Mapper instance for specified types.
            </summary>
            <typeparam name="TFrom">Type of source object</typeparam>
            <typeparam name="TTo">Type of destination object</typeparam>
            <returns></returns>
        </member>
        <member name="M:EmitMapper.ObjectMapperManager.GetMapper``2(EmitMapper.IMappingConfigurator)">
            <summary>
            Returns a Mapper instance for specified types.
            </summary>
            <typeparam name="TFrom">Type of source object</typeparam>
            <typeparam name="TTo">Type of destination object</typeparam>
            <Param name="mappingConfigurator">Object which configures mapping.</Param>
            <returns>Mapper</returns>
        </member>
        <member name="M:EmitMapper.ObjectMapperManager.GetMapperImpl(System.Type,System.Type,EmitMapper.IMappingConfigurator)">
            <summary>
            Returns a mapper implementation instance for specified types.
            </summary>
            <Param name="from">Type of source object</Param>
            <Param name="to">Type of destination object</Param>
            <Param name="mappingConfigurator">Object which configures mapping.</Param>
            <returns>Mapper</returns>
        </member>
        <member name="T:EmitObjectMapper.Mappers.MapperPrimitiveImpl">
            <summary>
            Mapper for primitive objects
            </summary>
        </member>
        <member name="M:EmitObjectMapper.Mappers.MapperPrimitiveImpl.MapImpl(System.Object,System.Object,System.Object)">
            <summary>
            Copies object properties and members of "from" to object "to"
            </summary>
            <Param name="from">Source object</Param>
            <Param name="to">Destination object</Param>
            <returns>Destination object</returns>
        </member>
        <member name="M:EmitObjectMapper.Mappers.MapperPrimitiveImpl.CreateTargetInstance">
            <summary>
            Creates an instance of destination object
            </summary>
            <returns>Destination object</returns>
        </member>
    </members>
</doc>
